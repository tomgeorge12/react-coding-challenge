{"version":3,"sources":["client/components/Header.js","client/components/Footer.js","client/components/Card.js","client/components/MainContent.js","client/components/Container.js","client/App.js","serviceWorker.js","index.js","client/logo.svg"],"names":["Header","className","React","Component","Footer","props","getFooterLinkOptions","bind","footerOptions","map","this","item","idx","length","Card","title","src","MainContent","state","showDetails","popularTitles","body","getPopularTitles","showPopularItems","toggleShowDetails","data","entries","releaseYear","images","url","setState","onClick","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uNAkBeA,E,iLAdP,OACI,6BACI,yBAAKC,UAAU,wBACX,0BAAMA,UAAU,uBAAuB,kBACvC,4BAAQA,UAAU,cAAc,yBAChC,uBAAGA,UAAU,qBAAqB,WAEtC,yBAAKA,UAAU,yBACX,0BAAMA,UAAU,sBAAsB,wB,GAVrCC,IAAMC,W,wBC8BZC,E,YA5BX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,cAAgB,CACjB,OAAQ,uBAAwB,iBAAkB,uBAAwB,OAAQ,kBAJxE,E,oFAQM,IAAD,OAMnB,OALoBC,IAAIC,KAAKF,eAAe,SAACG,EAAMC,GAC/C,OACI,oCAAGD,EAAMC,EAAM,EAAKJ,cAAcK,OAAO,GAAK,0BAAMZ,UAAU,yBAAyB,W,+BAM/F,OACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,8BACVS,KAAKJ,wBAEV,8BACK,4D,GAxBIJ,IAAMC,WCcZW,E,YAdX,WAAYT,GAAO,qEACTA,I,sEAEA,IAAD,EACkBK,KAAKL,MAApBU,EADH,EACGA,MAAOC,EADV,EACUA,IACf,OACI,yBAAKf,UAAU,QACX,yBAAKA,UAAU,YAAYe,IAAKA,IAChC,8BAAOD,Q,GATJb,IAAMC,W,QCyDVc,E,YArDX,WAAYZ,GAAO,IAAD,8BACd,4CAAMA,KACDa,MAAQ,CACTC,aAAY,GAEhB,EAAKC,cAAc,CACf,CAACC,KAAK,SAAUN,MAAM,kBACtB,CAACM,KAAK,SAAUN,MAAM,mBAE1B,EAAKO,iBAAiB,EAAKA,iBAAiBf,KAAtB,gBACtB,EAAKgB,iBAAiB,EAAKA,iBAAiBhB,KAAtB,gBACtB,EAAKiB,kBAAkB,EAAKA,kBAAkBjB,KAAvB,gBAXT,E,gFAqBd,OAPcE,IAAIgB,EAAKC,SAAS,SAACf,EAAMC,GACnC,GAAGA,EAAI,IAAMD,EAAKgB,YAAY,KAC1B,OACI,kBAAC,EAAD,CAAMZ,MAAOJ,EAAKI,MAAOC,IAAKL,EAAKiB,OAAO,cAAcC,W,0CAOpEnB,KAAKoB,SAAS,CAAEX,aAAa,M,yCAEb,IAAD,OASf,OARmBV,IAAIC,KAAKU,eAAe,SAACT,GACxC,OACI,yBAAKV,UAAU,aACX,yBAAKA,UAAU,iBAAiB8B,QAAS,EAAKP,mBAAmB,0BAAMvB,UAAU,wBAAwBU,EAAKU,OAC9G,8BAAOV,EAAKI,a,+BAOxB,OAAGL,KAAKQ,MAAMC,YAEN,yBAAKlB,UAAU,qBACVS,KAAKa,oBAKV,yBAAKtB,UAAU,qBACVS,KAAKY,wB,GAhDApB,IAAMC,WCiBjB6B,E,YAhBX,WAAY3B,GAAO,qEACTA,I,sEAGN,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKJ,UAAU,gBACX,kBAAC,EAAD,OAEJ,kBAAC,EAAD,W,GAXQC,IAAMC,WCQf8B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,8r9CEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.04ebadc9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className='header-first-section'>\r\n                    <span className='header-heading-main'>{'Demo Streaming'}</span>\r\n                    <button className='header-btn'>{'Start your free trial'}</button>\r\n                    <a className='header-link-login'>{'Log in'}</a>                    \r\n                </div>\r\n                <div className='header-second-section'>\r\n                    <span className='header-heading-sub'>{'Popular Titles'}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Header;","import React from 'react';\r\nimport map from 'lodash/map';\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.getFooterLinkOptions = this.getFooterLinkOptions.bind(this);\r\n        this.footerOptions = [\r\n            'Home', 'Terms and Conditions', 'Privacy Policy', 'Collection Statement', 'help', 'Manage Account'\r\n        ]\r\n    }\r\n\r\n    getFooterLinkOptions() {\r\n        const footerLinks = map(this.footerOptions, (item, idx)=>{\r\n            return(\r\n                <>{item}{idx < this.footerOptions.length-1 && <span className='footer-link-seperator'>{'|'}</span>}</>\r\n            )\r\n        });\r\n        return footerLinks;\r\n    }\r\n    render() {\r\n        return(\r\n        <div className='footer-section'>\r\n            <div className='footer-link-seperator-wrap'>\r\n                {this.getFooterLinkOptions()}\r\n            </div>\r\n            <span>\r\n                {'CopyRight 2019 Demo Streaming. All Rights reserved.'}\r\n            </span>\r\n        </div>);\r\n    }\r\n}\r\nexport default Footer;","import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        const { title, src } = this.props;\r\n        return(\r\n            <div className='card'>\r\n                <img className='card-body' src={src}/>\r\n                <span>{title}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport map from 'lodash/map';\r\nimport Card from './Card';\r\nimport data from './sample.json';\r\n\r\nclass MainContent extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showDetails:false\r\n        }\r\n        this.popularTitles=[\r\n            {body:'SERIES', title:'Popular Series'},\r\n            {body:'MOVIES', title:'Popular Movies'}\r\n        ]\r\n        this.getPopularTitles=this.getPopularTitles.bind(this);\r\n        this.showPopularItems=this.showPopularItems.bind(this);\r\n        this.toggleShowDetails=this.toggleShowDetails.bind(this);\r\n    }\r\n    showPopularItems(){\r\n        const cards = map(data.entries, (item, idx)=> {\r\n            if(idx<11 && item.releaseYear>2010){\r\n                return(\r\n                    <Card title={item.title} src={item.images['Poster Art'].url} />\r\n                )\r\n            }\r\n        });\r\n        return cards;\r\n    }\r\n    toggleShowDetails(){\r\n        this.setState({ showDetails: true});\r\n    }\r\n    getPopularTitles() {\r\n        const titleCards = map(this.popularTitles, (item)=> {\r\n            return(\r\n                <div className='main-card' >\r\n                    <div className='main-card-body' onClick={this.toggleShowDetails}><span className='.main-card-body-text'>{item.body}</span></div>\r\n                    <span>{item.title}</span>\r\n                </div>\r\n            )\r\n        });\r\n        return titleCards;\r\n    }\r\n    render() {\r\n        if(this.state.showDetails){\r\n            return(\r\n                <div className='main-content-body'>\r\n                    {this.showPopularItems()}\r\n                </div>\r\n            );\r\n        } else {\r\n            return(\r\n                <div className='main-content-body'>\r\n                    {this.getPopularTitles()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default MainContent;","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport MainContent from './MainContent';\r\n\r\nclass Container extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Header />\r\n                <div className='body-content'>\r\n                    <MainContent />\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Container from './components/Container'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Container />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './client/index.css';\r\nimport App from './client/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}